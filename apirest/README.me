# API REST - Documentación de Endpoints
GoLang

Este README proporciona una descripción detallada de los endpoints disponibles en la API REST desarrollada en Go. La API permite a los usuarios realizar operaciones CRUD en una base de datos y cuenta con autenticación y autorización implementadas mediante tokens JWT. También se han incorporado técnicas de optimización y seguridad para garantizar un funcionamiento seguro y eficiente.

## Endpoints Disponibles

A continuación, se presenta una tabla que describe los endpoints disponibles, sus rutas, descripciones y requisitos de autenticación:

| Número | Método | Ruta                                      | Descripción                                                                 | Autenticación |
|--------|--------|-------------------------------------------|-----------------------------------------------------------------------------|---------------|
| 1      | POST   | `/login`                                 | Inicio de sesión de usuario y obtención de token JWT válido.                | No            |
| 2      | GET    | `/api/v1/hello`                          | Devuelve un saludo simple. Requiere autenticación.                         | Sí            |
| 3      | GET    | `/api/v1/customer/document_number/{id}`  | Obtiene información de cliente por número de documento. Requiere autenticación. | Sí            |
| 4      | GET    | `/api/v1/customer/customer_number/{id}`  | Obtiene información de cliente por número de cliente. Requiere autenticación. | Sí            |
| 5      | POST   | `/api/v1/creditcard/create`              | Crea una nueva tarjeta de crédito. Requiere autenticación.                 | Sí            |
| 6      | GET    | `/api/v1/creditcard/search`              | Recupera todas las tarjetas de crédito. Requiere autenticación.             | Sí            |
| 7      | GET    | `/api/v1/creditcard/search/{uniqueid}`   | Recupera una tarjeta de crédito por ID único. Requiere autenticación.      | Sí            |
| 8      | POST   | `/api/v1/survey/create`                 | Crea una nueva encuesta. Requiere autenticación.                           | Sí            |
| 9      | PUT    | `/api/v1/survey/update/{uniqueid}`      | Actualiza una encuesta existente por ID único. Requiere autenticación.     | Sí            |
| 10     | PUT    | `/api/v1/survey/aborted/{uniqueid}`     | Marca una encuesta como abortada por ID único. Requiere autenticación.     | Sí            |

## Ejecución Local con `go run`

1. Clona este repositorio en tu máquina local.
2. Asegúrate de tener Go instalado.
3. Instala las dependencias necesarias utilizando el comando `go get`.
4. Crea un archivo `.env` en la raíz del proyecto y configura las variables de entorno según las indicaciones anteriores.
5. Ejecuta la aplicación usando el comando `go run *.go`.
6. Accede a los diferentes endpoints utilizando un cliente API (por ejemplo, Postman).

## Ejecución con Docker Compose

Puedes ejecutar esta aplicación junto con una base de datos MySQL utilizando Docker Compose. A continuación se muestra un ejemplo de un archivo `docker-compose.yml` que configura los servicios necesarios:

```yaml
version: "3.8"

services:
  myapp:
    container_name: myapp
    image: cnsoluciones/myapp
    ports:
      - 1444:1444
    env_file:
      - .env
    depends_on:
        dbapi:
          condition: service_healthy
    restart: unless-stopped

  dbapi:
    container_name: dbapi
    image: mysql:8.0
    ports:
      - 3306:3306
    env_file:
      - .env
    volumes:
      - ./user-data/db:/var/lib/mysql
    command: ["sh", "-c", "echo '[mysqld]' > /etc/mysql/conf.d/api.cnf && echo 'default-authentication-plugin = mysql_native_password' >> /etc/mysql/conf.d/api.cnf && echo 'block_encryption_mode=aes-256-ecb' >> /etc/mysql/conf.d/api.cnf && docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci"]
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD

  phpmyadmin:
    container_name: phpmyadmin
    image: phpmyadmin/phpmyadmin:latest
    restart: always
    links:
        - dbapi
    depends_on:
        dbapi:
          condition: service_healthy
    ports:
        - 9191:80
    environment:
        PMA_HOST: dbapi
        PMA_PORT: 3306
        MYSQL_USERNAME: ${MYSQL_USER}
        MYSQL_PASSWORD: ${MYSQL_PASSWORD}
        MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
```

## Configuración de Variables de Entorno (.env)

Aquí se explican las variables de entorno utilizadas en el archivo `.env`:

| Variable              | Descripción                                                                 | Ejemplo                  |
|-----------------------|-----------------------------------------------------------------------------|--------------------------|
| `DEBUG`               | Define si la aplicación se ejecuta en modo de depuración.                  | `DEBUG=false`            |
| `TOKEN_SECRET`        | Clave secreta utilizada para firmar y verificar tokens JWT.                | `TOKEN_SECRET=my-secret-token` |
| `DB_HOST`             | Dirección del host de la base de datos interna.                            | `DB_HOST=dbapi`          |
| `DB_PORT`             | Puerto de la base de datos interna.                                        | `DB_PORT=3306`           |
| `DB_USER`             | Nombre de usuario de la base de datos interna.                             | `DB_USER=myuser`         |
| `DB_PASSWORD`         | Contraseña del usuario de la base de datos interna.                         | `DB_PASSWORD=mypassword` |
| `DB_NAME`             | Nombre de la base de datos interna.                                        | `DB_NAME=mydatabase`     |
| `MYSQL_ROOT_PASSWORD` | Contraseña de root de la base de datos MySQL.                               | `MYSQL_ROOT_PASSWORD=my-secret-pw` |
| `MYSQL_DATABASE`      | Nombre de la base de datos MySQL.                                          | `MYSQL_DATABASE=mydatabase` |
| `MYSQL_USER`          | Nombre de usuario de la base de datos MySQL.                                | `MYSQL_USER=myuser`      |
| `MYSQL_PASSWORD`      | Contraseña del usuario de la base de datos MySQL.                            | `MYSQL_PASSWORD=mypassword` |
| `MYSQL_ENC`           | Cadena aleatoria o secreta para encriptación de datos sensibles.           | `MYSQL_ENC=my-secret-key-enc` |



## Conclusiones
Esta API REST desarrollada en Go es una demostración sólida de cómo crear un servicio seguro y escalable para realizar operaciones CRUD y autenticación utilizando tokens JWT. El uso de middlewares para validar argumentos y agregar cabeceras de seguridad aumenta la confiabilidad y la seguridad del sistema. Puedes utilizar este proyecto como punto de partida para desarrollar aplicaciones más complejas basadas en una API REST.

Here's the link to the apirest directory on GitHub: [here](https://github.com/lordbasex/golang-examples/tree/main/apirest).


